# unisinu_thesis_chatbot.py
import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
import os
import pickle
import json
import hashlib
from datetime import datetime
try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False

@st.cache_resource
def load_llama_model():
    """Carga el modelo con optimizaciones"""
    try:
        # Usar modelo m√°s compatible y liviano
        model_name = "microsoft/DialoGPT-small"  # M√°s liviano y estable
        
        print(f"üì• Descargando modelo: {model_name}")
        
        # Cargar tokenizer
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        if tokenizer.pad_token is None:
            tokenizer.pad_token = tokenizer.eos_token
        
        # Configurar argumentos del modelo
        model_kwargs = {
            "torch_dtype": torch.float32,
        }
        
        # Cargar modelo
        model = AutoModelForCausalLM.from_pretrained(model_name, **model_kwargs)
        
        print("‚úÖ Modelo cargado exitosamente")
        return model, tokenizer
    except Exception as e:
        print(f"‚ùå Error cargando el modelo: {str(e)}")
        st.error(f"Error cargando el modelo: {str(e)}")
        return None, None

@st.cache_resource
def setup_rag_system(pdf_folder="pdfs"):
    """Configura el sistema RAG con los PDFs de trabajo de grado"""
    try:
        # Embeddings en espa√±ol
        embeddings = HuggingFaceEmbeddings(
            model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
        )
        
        # Verificar si existe vectorstore guardado
        vectorstore_path = "unisinu_vectorstore"
        if os.path.exists(f"{vectorstore_path}.faiss"):
            vectorstore = FAISS.load_local(vectorstore_path, embeddings, allow_dangerous_deserialization=True)
            return vectorstore, embeddings
        
        # Si no existe, crear nuevo vectorstore
        all_documents = []
        if os.path.exists(pdf_folder):
            for pdf_file in os.listdir(pdf_folder):
                if pdf_file.endswith('.pdf'):
                    try:
                        pdf_path = os.path.join(pdf_folder, pdf_file)
                        loader = PyPDFLoader(pdf_path)
                        documents = loader.load()
                        
                        for doc in documents:
                            doc.metadata.update({
                                "source": pdf_file,
                                "doc_type": identify_doc_type(pdf_file)
                            })
                        
                        all_documents.extend(documents)
                    except Exception as e:
                        st.warning(f"Error cargando {pdf_file}: {str(e)}")
                        continue
        
        if all_documents:
            # Dividir documentos en chunks
            text_splitter = RecursiveCharacterTextSplitter(
                chunk_size=1000,
                chunk_overlap=200,
                separators=["\n\n", "\n", ".", "!", "?", ",", " ", ""]
            )
            
            texts = text_splitter.split_documents(all_documents)
            vectorstore = FAISS.from_documents(texts, embeddings)
            
            # Guardar para uso futuro
            vectorstore.save_local(vectorstore_path)
        else:
            vectorstore = None
        
        return vectorstore, embeddings
    except Exception as e:
        st.error(f"Error configurando sistema RAG: {str(e)}")
        return None, None

def identify_doc_type(filename):
    """Identifica el tipo de documento"""
    filename_lower = filename.lower()
    if "reglamento" in filename_lower or "opcion" in filename_lower:
        return "reglamento_grado"
    elif "practica" in filename_lower:
        return "practica_profesional"
    elif "procedimiento" in filename_lower:
        return "procedimiento"
    else:
        return "general"

class RedisCache:
    """Maneja el cache de respuestas con Redis"""
    def __init__(self):
        self.redis_client = None
        self.cache_available = False
        self._connect()
    
    def _connect(self):
        """Conecta a Redis con fallback"""
        if not REDIS_AVAILABLE:
            print("‚ö†Ô∏è M√≥dulo redis no instalado - cache deshabilitado")
            self.cache_available = False
            return
            
        try:
            self.redis_client = redis.Redis(
                host='localhost', 
                port=6379, 
                db=0, 
                decode_responses=True,
                socket_connect_timeout=2,
                socket_timeout=2
            )
            # Probar conexi√≥n
            self.redis_client.ping()
            self.cache_available = True
            print("‚úÖ Redis conectado exitosamente")
        except Exception as e:
            print(f"‚ö†Ô∏è Redis no disponible: {e}")
            self.cache_available = False
    
    def _generate_key(self, user_input):
        """Genera clave √∫nica para el cache"""
        normalized_input = user_input.lower().strip()
        return f"thesis_chatbot_response:{hashlib.md5(normalized_input.encode()).hexdigest()}"
    
    def get_response(self, user_input):
        """Obtiene respuesta del cache"""
        if not self.cache_available:
            return None
        
        try:
            key = self._generate_key(user_input)
            cached_data = self.redis_client.get(key)
            if cached_data:
                response_data = json.loads(cached_data)
                print(f"üîÑ Cache HIT para: {user_input[:50]}...")
                return response_data['response']
        except Exception as e:
            print(f"Error obteniendo del cache: {e}")
        
        return None
    
    def set_response(self, user_input, response, ttl=3600):
        """Guarda respuesta en cache"""
        if not self.cache_available:
            return False
        
        try:
            key = self._generate_key(user_input)
            response_data = {
                'response': response,
                'timestamp': datetime.now().isoformat(),
                'input': user_input
            }
            self.redis_client.setex(key, ttl, json.dumps(response_data))
            print(f"üíæ Cache SAVE para: {user_input[:50]}...")
            return True
        except Exception as e:
            print(f"Error guardando en cache: {e}")
            return False

class UnusinuThesisBot:
    def __init__(self):
        self.model = None
        self.tokenizer = None
        self.vectorstore = None
        self.embeddings = None
        self.conversation_history = []
        self.cache = RedisCache()
    
    def search_documents(self, query, k=2):
        """Busca en los documentos PDF"""
        try:
            if not self.vectorstore:
                print("‚ö†Ô∏è No hay vectorstore disponible")
                return ""
            
            print(f"üîç Buscando: {query}")
            docs = self.vectorstore.similarity_search(query, k=k)
            context = ""
            for doc in docs:
                context += f"\n[{doc.metadata.get('doc_type', 'documento')}]: {doc.page_content}\n"
            
            print(f"üìÑ Documentos encontrados: {len(docs)}")
            return context
        except Exception as e:
            print(f"‚ùå Error en b√∫squeda de documentos: {e}")
            return ""
    
    def get_fallback_response(self, user_input):
        """Respuesta de emergencia usando la informaci√≥n hardcodeada"""
        user_lower = user_input.lower()
        
        # Modalidades de trabajo de grado
        if any(word in user_lower for word in ["modalidad", "modalidades", "tipos", "opciones", "trabajo de grado", "opcion de grado"]):
            return """üìã **MODALIDADES DE TRABAJO DE GRADO - UNISINU:**

**1. üî¨ TRABAJOS INVESTIGATIVOS:**
‚Ä¢ Participaci√≥n activa en un Grupo de Investigaci√≥n
‚Ä¢ Presentaci√≥n y desarrollo de un Proyecto de Investigaci√≥n

**2. üè¢ PR√ÅCTICAS DE EXTENSI√ìN:**
‚Ä¢ Pr√°ctica con Proyecci√≥n Empresarial o Social
‚Ä¢ Internado Rotatorio en Medicina
‚Ä¢ Judicatura (Programa de Derecho)

**3. üéì CO-TERMINAL:**
‚Ä¢ Cursar asignaturas de primer semestre de Posgrado

**4. üìö CURSOS DE PERFECCIONAMIENTO:**
‚Ä¢ Diplomados especializados

üìù **Nota m√≠nima:** 3.5 (excepto trabajos investigativos: 3.0 y diplomados: 3.8)
‚è∞ **Duraci√≥n:** M√≠nimo 4 meses, m√°ximo 12 meses

üìû **Contacto Universidad del Sin√∫:**
üìß Email: admisiones@unisinu.edu.co
üìç Monter√≠a, C√≥rdoba"""
        
        # Requisitos generales
        elif any(word in user_lower for word in ["requisitos", "requerimientos", "necesito", "debo cumplir"]):
            return """üìã **REQUISITOS PARA TRABAJO DE GRADO - UNISINU:**

**‚úÖ REQUISITOS GENERALES:**
‚Ä¢ Haber terminado todas las materias del pensum acad√©mico
‚Ä¢ Presentar propuesta al Comit√© de Trabajos de Grado
‚Ä¢ Tener director de trabajo de grado asignado
‚Ä¢ Cumplir con los pre-requisitos del programa

**üìù DOCUMENTACI√ìN:**
‚Ä¢ Formulario de inscripci√≥n diligenciado
‚Ä¢ Anteproyecto o propuesta seg√∫n modalidad
‚Ä¢ Certificados m√©dicos (si aplica)
‚Ä¢ Documentos espec√≠ficos seg√∫n modalidad

**‚è∞ PLAZOS:**
‚Ä¢ Inscripci√≥n: Primeros 15 d√≠as del ciclo lectivo
‚Ä¢ Desarrollo: 4-12 meses desde aprobaci√≥n
‚Ä¢ Sustentaci√≥n: Seg√∫n cronograma del comit√©

üìû **M√°s informaci√≥n:**
üìß Email: admisiones@unisinu.edu.co
üìç Universidad del Sin√∫ - Monter√≠a"""
        
        # Proceso de inscripci√≥n
        elif any(word in user_lower for word in ["inscripcion", "inscripci√≥n", "como inscribir", "proceso", "pasos"]):
            return """üìù **PROCESO DE INSCRIPCI√ìN TRABAJO DE GRADO - UNISINU:**

**üîπ PASO 1: PREPARACI√ìN**
‚Ä¢ Definir modalidad de trabajo de grado
‚Ä¢ Identificar director/tutor
‚Ä¢ Preparar anteproyecto

**üîπ PASO 2: INSCRIPCI√ìN**
‚Ä¢ Llenar formulario de inscripci√≥n
‚Ä¢ Presentar al Comit√© de Trabajos de Grado
‚Ä¢ Plazo: Primeros 15 d√≠as del ciclo lectivo

**üîπ PASO 3: EVALUACI√ìN**
‚Ä¢ El comit√© eval√∫a la propuesta (m√°ximo 20 d√≠as h√°biles)
‚Ä¢ Asignaci√≥n de director/supervisor
‚Ä¢ Aprobaci√≥n o solicitud de modificaciones

**üîπ PASO 4: DESARROLLO**
‚Ä¢ Seguimiento con director asignado
‚Ä¢ Entregas peri√≥dicas seg√∫n cronograma
‚Ä¢ Evaluaci√≥n continua

**üîπ PASO 5: FINALIZACI√ìN**
‚Ä¢ Entrega de informe final
‚Ä¢ Sustentaci√≥n p√∫blica
‚Ä¢ Calificaci√≥n final

üìû **Contacto:**
üìß Email: admisiones@unisinu.edu.co"""
        
        # Duraci√≥n y plazos
        elif any(word in user_lower for word in ["duracion", "duraci√≥n", "tiempo", "plazo", "cuanto tiempo"]):
            return """‚è∞ **DURACI√ìN Y PLAZOS - TRABAJO DE GRADO UNISINU:**

**üìÖ DURACI√ìN GENERAL:**
‚Ä¢ **M√≠nimo:** 4 meses
‚Ä¢ **M√°ximo:** 12 meses
‚Ä¢ **Conteo:** Desde fecha de aprobaci√≥n del proyecto

**üîç POR MODALIDAD:**
‚Ä¢ **Trabajos Investigativos:** 4-12 meses
‚Ä¢ **Pr√°cticas Empresariales:** 4-6 meses (tiempo completo) o 9-12 meses (medio tiempo)
‚Ä¢ **Judicatura:** 9 meses (ad-honorem) o 1 a√±o (remunerada)
‚Ä¢ **Co-terminal:** 1 semestre

**‚ö†Ô∏è PLAZOS IMPORTANTES:**
‚Ä¢ Inscripci√≥n: Primeros 15 d√≠as del ciclo
‚Ä¢ Evaluaci√≥n propuesta: M√°ximo 20 d√≠as h√°biles
‚Ä¢ Vigencia propuesta: 1 a√±o
‚Ä¢ Asesor√≠as: 16-32 horas por semestre

**üîÑ PR√ìRROGA:**
‚Ä¢ M√°ximo 2 meses adicionales
‚Ä¢ Requiere 75% de avance demostrado
‚Ä¢ Aprobaci√≥n del Comit√© de Trabajos de Grado

üìû **Consultas:**
üìß Email: admisiones@unisinu.edu.co"""
        
        # Calificaciones
        elif any(word in user_lower for word in ["calificacion", "calificaci√≥n", "nota", "notas", "minima", "m√≠nima", "aprobar"]):
            return """üìä **CALIFICACIONES TRABAJO DE GRADO - UNISINU:**

**üéØ NOTAS M√çNIMAS POR MODALIDAD:**
‚Ä¢ **Trabajos Investigativos:** 3.0/5.0
‚Ä¢ **Pr√°cticas de Extensi√≥n:** 3.5/5.0
‚Ä¢ **Co-terminal:** 3.5/5.0
‚Ä¢ **Diplomados:** 3.8/5.0

**üèÜ ESCALA DE EVALUACI√ìN:**
‚Ä¢ **Laureado:** 5.0
‚Ä¢ **Meritorio:** 4.5 - 4.9
‚Ä¢ **Sobresaliente:** 4.0 - 4.4
‚Ä¢ **Satisfactorio:** 3.5 - 3.9
‚Ä¢ **Suficiente:** 3.0 - 3.4
‚Ä¢ **Insuficiente:** < 3.0

**‚ö†Ô∏è IMPORTANTES:**
‚Ä¢ Si se reprueba, debe cambiar de modalidad
‚Ä¢ Reconocimientos Meritorio/Laureado requieren aprobaci√≥n del Consejo Acad√©mico
‚Ä¢ La calificaci√≥n incluye: documento escrito + sustentaci√≥n + relaci√≥n entre ambos

üìû **M√°s informaci√≥n:**
üìß Email: admisiones@unisinu.edu.co
üìç Universidad del Sin√∫ - Monter√≠a"""
        
        # Comit√© de trabajos de grado
        elif any(word in user_lower for word in ["comite", "comit√©", "quien evalua", "qui√©n eval√∫a", "evaluacion", "evaluaci√≥n"]):
            return """üë• **COMIT√â DE TRABAJOS DE GRADO - UNISINU:**

**üîπ COMPOSICI√ìN:**
‚Ä¢ Decano de la Facultad (presidente)
‚Ä¢ Jefe de programa
‚Ä¢ Coordinador de Pr√°ctica de la Facultad
‚Ä¢ Coordinador de Investigaciones de la Facultad
‚Ä¢ Jefes de √°rea del programa

**üîπ FUNCIONES PRINCIPALES:**
‚Ä¢ Evaluar propuestas de trabajo de grado
‚Ä¢ Designar directores y supervisores
‚Ä¢ Asignar jurados calificadores
‚Ä¢ Definir fechas de sustentaci√≥n
‚Ä¢ Resolver temas del reglamento

**üîπ PROCESO DE EVALUACI√ìN:**
‚Ä¢ M√°ximo 20 d√≠as h√°biles para respuesta
‚Ä¢ Reuniones cada 15 d√≠as m√°ximo
‚Ä¢ Seguimiento de cronogramas
‚Ä¢ Supervisi√≥n de calidad acad√©mica

**üìû **Contacto:**
üìß Email: admisiones@unisinu.edu.co
üìç Universidad del Sin√∫ - Monter√≠a"""
        
        # Pr√°cticas profesionales
        elif any(word in user_lower for word in ["practica", "pr√°ctica", "pasantia", "pasant√≠a", "empresa", "instituciones"]):
            return """üè¢ **PR√ÅCTICAS PROFESIONALES - UNISINU:**

**üìã TIPOS DE PR√ÅCTICA:**
‚Ä¢ Pr√°ctica Empresarial
‚Ä¢ Pr√°ctica Social
‚Ä¢ Judicatura (solo Derecho)

**‚è∞ DURACI√ìN:**
‚Ä¢ **Tiempo completo:** 4-6 meses
‚Ä¢ **Medio tiempo:** 9-12 meses

**‚úÖ REQUISITOS:**
‚Ä¢ Haber aprobado todas las asignaturas
‚Ä¢ Autorizaci√≥n de la Facultad
‚Ä¢ Carta de aceptaci√≥n de la empresa/instituci√≥n
‚Ä¢ Plan de trabajo avalado
‚Ä¢ EPS vigente

**üèõÔ∏è SEDES V√ÅLIDAS:**
‚Ä¢ Empresas privadas legalmente constituidas
‚Ä¢ Instituciones p√∫blicas
‚Ä¢ ONGs reconocidas
‚Ä¢ No se acepta: empresas familiares hasta 4to grado

**üìä EVALUACI√ìN:**
‚Ä¢ Informe parcial (8va semana)
‚Ä¢ Informe final
‚Ä¢ Evaluaci√≥n del supervisor externo
‚Ä¢ Taller de socializaci√≥n

üìû **M√°s informaci√≥n:**
üìß Email: admisiones@unisinu.edu.co"""
        
        # Director de trabajo de grado
        elif any(word in user_lower for word in ["director", "tutor", "asesor", "supervisor", "quien dirige", "qui√©n dirige"]):
            return """üë®‚Äçüè´ **DIRECTOR DE TRABAJO DE GRADO - UNISINU:**

**üîπ SELECCI√ìN:**
‚Ä¢ Sugerido por el estudiante con orientaci√≥n del consejero acad√©mico
‚Ä¢ Si no hay sugerencia, el Comit√© asigna uno
‚Ä¢ Debe tener expertise en el √°rea del proyecto

**üîπ FUNCIONES:**
‚Ä¢ Avalar la propuesta del estudiante
‚Ä¢ Crear agenda de seguimiento
‚Ä¢ Asesorar en la elaboraci√≥n del proyecto
‚Ä¢ Revisar contenido, metodolog√≠a y presentaci√≥n
‚Ä¢ Asistir a reuniones del Comit√©
‚Ä¢ Asistir a la sustentaci√≥n final
‚Ä¢ Informar incumplimientos del estudiante

**üîπ ASESOR√çAS:**
‚Ä¢ 16-32 horas por semestre
‚Ä¢ Hasta por 2 per√≠odos acad√©micos (1 a√±o)
‚Ä¢ Seguimiento continuo del cronograma

**‚ö†Ô∏è CAMBIO DE DIRECTOR:**
‚Ä¢ El estudiante puede solicitar cambio justificado
‚Ä¢ Requiere aprobaci√≥n del Comit√© de Trabajos de Grado

üìû **Consultas:**
üìß Email: admisiones@unisinu.edu.co"""
        
        return None

    def generate_response(self, user_input):
        """Genera respuesta usando fallback primero, luego PDFs si es necesario"""
        print(f"üîç INPUT: {user_input}")
        
        # Intentar obtener respuesta del cache primero
        cached_response = self.cache.get_response(user_input)
        if cached_response:
            print("üìã Usando respuesta del cache")
            return cached_response
        
        # Primero intentar respuesta de fallback
        fallback = self.get_fallback_response(user_input)
        if fallback:
            print("‚úÖ Respuesta hardcodeada encontrada")
            self.cache.set_response(user_input, fallback, ttl=7200)
            return fallback
        
        # Si no hay respuesta hardcodeada, buscar en PDFs
        print("üìö No hay respuesta hardcodeada, buscando en PDFs...")
        document_context = self.search_documents(user_input)
        print(f"üìÑ Contexto encontrado: {len(document_context) if document_context else 0} caracteres")
        
        if document_context and len(document_context.strip()) > 50:
            pdf_response = f"""üìã **Informaci√≥n encontrada en documentos oficiales UNISINU:**

{document_context}

üìû **Para m√°s informaci√≥n:**
üìß Email: admisiones@unisinu.edu.co
üìç Universidad del Sin√∫ - El√≠as Bechara Zain√∫m
üèõÔ∏è Monter√≠a, C√≥rdoba, Colombia

üí° **Consulta tambi√©n:** Oficina de Admisiones y Registro Acad√©mico"""
            
            print("‚úÖ Respuesta generada desde PDFs")
            self.cache.set_response(user_input, pdf_response, ttl=3600)
            return pdf_response
        
        # Si no encontramos nada en PDFs, dar respuesta gen√©rica
        print("‚ùå No se encontr√≥ informaci√≥n espec√≠fica")
        generic_response = f"""üéì **Universidad del Sin√∫ - El√≠as Bechara Zain√∫m**

Lo siento, no tengo informaci√≥n espec√≠fica sobre tu consulta en este momento.

üìû **Para informaci√≥n detallada contacta:**
üìß Email: admisiones@unisinu.edu.co
üèõÔ∏è Oficina de Admisiones y Registro Acad√©mico
üìç Universidad del Sin√∫ - Monter√≠a, C√≥rdoba

**üîç Consultas frecuentes:**
‚Ä¢ Modalidades de trabajo de grado
‚Ä¢ Requisitos y proceso de inscripci√≥n
‚Ä¢ Duraci√≥n y plazos
‚Ä¢ Calificaciones y evaluaci√≥n
‚Ä¢ Pr√°cticas profesionales

¬°Estaremos felices de ayudarte! üìö"""
        
        self.cache.set_response(user_input, generic_response, ttl=1800)
        return generic_response

# Aplicaci√≥n Streamlit
def main():
    st.set_page_config(
        page_title="Asistente Trabajo de Grado UNISINU",
        page_icon="üéì",
        layout="wide"
    )
    
    # CSS personalizado
    st.markdown("""
    <style>
    .stApp {
        background-color: #f8f9fa;
        color: #333333;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .header-container {
        background: linear-gradient(135deg, #dc3545 0%, #8b1538 100%);
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.2);
        text-align: center;
    }
    
    .logo-space {
        width: 80px;
        height: 80px;
        background-color: #ffffff;
        border-radius: 50%;
        margin: 0 auto 15px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 40px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }
    
    .main-title {
        color: #ffffff !important;
        font-size: 28px;
        font-weight: bold;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #dc3545 0%, #8b1538 100%);
        color: white !important;
        border: none;
        border-radius: 12px;
        padding: 12px 20px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 3px 8px rgba(220, 53, 69, 0.3);
        width: 100%;
        margin-bottom: 8px;
    }
    
    .stButton > button:hover {
        background: linear-gradient(135deg, #c82333 0%, #721c24 100%);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
    }
    
    .frequent-queries {
        background: linear-gradient(rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.95));
        padding: 20px;
        border-radius: 15px;
        margin: 20px 0;
        border: 3px solid #dc3545;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .section-title {
        color: #dc3545 !important;
        background-color: rgba(255, 255, 255, 0.95);
        font-size: 24px;
        font-weight: 900;
        margin-bottom: 15px;
        text-align: center;
        padding: 8px 16px;
        border-radius: 8px;
        display: inline-block;
        width: 100%;
        box-sizing: border-box;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header personalizado con logo
    col_logo, col_title = st.columns([1, 4])
    
    with col_logo:
        try:
            st.image("logo/LOGO_UNISINU.png", width=120)
        except:
            st.markdown("""
            <div class="logo-space">üéì</div>
            """, unsafe_allow_html=True)
    
    with col_title:
        st.markdown("""
        <div class="header-container">
            <h1 class="main-title">Asistente Virtual - Trabajo de Grado UNISINU</h1>
            <p style="color: #ffffff; margin: 0;">Universidad del Sin√∫ - El√≠as Bechara Zain√∫m</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Mensaje de bienvenida
    st.markdown("""
    <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); 
                padding: 20px; 
                border-radius: 15px; 
                margin: 20px auto; 
                border-left: 5px solid #dc3545;
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
                max-width: 800px;
                text-align: center;">
        <h3 style="color: #dc3545; margin-bottom: 15px; font-weight: bold;">¬°Bienvenido al Asistente de Trabajo de Grado!</h3>
        <p style="color: #495057; font-size: 16px; margin: 0; line-height: 1.5;">
            Estoy aqu√≠ para ayudarte con todas tus consultas sobre <strong>trabajos de grado, modalidades, requisitos, 
            pr√°cticas profesionales y procedimientos</strong> de la Universidad del Sin√∫. 
            <strong>¬øEn qu√© puedo asistirte hoy?</strong> üìö
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar bot
    if "bot" not in st.session_state:
        with st.spinner("Inicializando sistema de trabajo de grado..."):
            st.session_state.bot = UnusinuThesisBot()
            st.session_state.bot.vectorstore, st.session_state.bot.embeddings = setup_rag_system()
        st.success("‚úÖ Sistema listo para consultas!")
    
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Botones de consultas frecuentes
    st.markdown("""
    <div class="frequent-queries">
        <div class="section-title">Consultas Frecuentes</div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìã Modalidades de Trabajo de Grado"):
            user_input = "¬øCu√°les son las modalidades de trabajo de grado?"
            process_message(user_input)
            
        if st.button("‚è∞ Duraci√≥n y Plazos"):
            user_input = "¬øCu√°nto tiempo dura un trabajo de grado?"
            process_message(user_input)
            
        if st.button("üë®‚Äçüè´ Director de Trabajo de Grado"):
            user_input = "¬øC√≥mo se asigna el director de trabajo de grado?"
            process_message(user_input)
    
    with col2:
        if st.button("‚úÖ Requisitos Generales"):
            user_input = "¬øQu√© requisitos debo cumplir para el trabajo de grado?"
            process_message(user_input)
            
        if st.button("üìä Calificaciones y Notas"):
            user_input = "¬øCu√°les son las notas m√≠nimas para aprobar?"
            process_message(user_input)
            
        if st.button("üè¢ Pr√°cticas Profesionales"):
            user_input = "¬øC√≥mo funcionan las pr√°cticas profesionales?"
            process_message(user_input)
        
    with col3:
        if st.button("üìù Proceso de Inscripci√≥n"):
            user_input = "¬øC√≥mo me inscribo para el trabajo de grado?"
            process_message(user_input)
        
        if st.button("üë• Comit√© de Trabajos de Grado"):
            user_input = "¬øQui√©n eval√∫a mi trabajo de grado?"
            process_message(user_input)
            
        if st.button("üìû Informaci√≥n de Contacto"):
            user_input = "¬øD√≥nde puedo obtener m√°s informaci√≥n?"
            process_message(user_input)
    
    # Mostrar historial de chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Input del usuario
    if prompt := st.chat_input("Escribe tu pregunta sobre trabajo de grado aqu√≠..."):
        process_message(prompt)

def process_message(user_input):
    """Procesa un mensaje del usuario"""
    # Agregar mensaje del usuario al historial
    st.session_state.messages.append({"role": "user", "content": user_input})
    
    # Generar respuesta
    with st.spinner("Consultando reglamentos y documentos..."):
        response = st.session_state.bot.generate_response(user_input)
    
    # Agregar respuesta al historial
    st.session_state.messages.append({"role": "assistant", "content": response})
    
    # Rerun para mostrar los nuevos mensajes
    st.rerun()

# Informaci√≥n adicional en el sidebar
def show_sidebar_info():
    """Muestra informaci√≥n adicional en el sidebar"""
    st.sidebar.markdown("""
    ## üéì Universidad del Sin√∫
    ### El√≠as Bechara Zain√∫m
    
    ---
    
    ### üìã Modalidades Disponibles:
    
    **üî¨ Trabajos Investigativos**
    - Participaci√≥n en Grupo de Investigaci√≥n
    - Proyecto de Investigaci√≥n Individual
    
    **üè¢ Pr√°cticas de Extensi√≥n**
    - Pr√°ctica Empresarial
    - Pr√°ctica Social
    - Judicatura (Derecho)
    
    **üéì Co-terminal**
    - Asignaturas de Posgrado
    
    **üìö Diplomados**
    - Cursos de Perfeccionamiento
    
    ---
    
    ### ‚è∞ Datos Importantes:
    - **Duraci√≥n:** 4-12 meses
    - **Nota m√≠nima:** 3.0-3.8 (seg√∫n modalidad)
    - **Inscripci√≥n:** Primeros 15 d√≠as del ciclo
    
    ---
    
    ### üìû Contacto:
    **Email:** admisiones@unisinu.edu.co  
    **Ubicaci√≥n:** Monter√≠a, C√≥rdoba  
    **Web:** www.unisinu.edu.co
    
    ---
    
    ### üìÑ Documentos Cargados:
    - Reglamento de Opci√≥n de Grado
    - Procedimiento Trabajo de Grado
    - Reglamento Pr√°cticas Profesionales
    """)

if __name__ == "__main__":
    # Mostrar informaci√≥n en sidebar
    show_sidebar_info()
    
    # Ejecutar aplicaci√≥n principal
    main()
    
    # Footer
    st.markdown("""
    ---
    <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #dc3545 0%, #8b1538 100%); 
                border-radius: 10px; margin-top: 30px;">
        <p style="color: white; margin: 0; font-weight: bold;">
            üéì Universidad del Sin√∫ - El√≠as Bechara Zain√∫m<br>
            üìç Monter√≠a, C√≥rdoba, Colombia<br>
            üìß admisiones@unisinu.edu.co
        </p>
    </div>
    """, unsafe_allow_html=True)